datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id                   Int                   @id @default(autoincrement())
  companyId            Int?
  regencyId            Int?
  email                String                @unique
  password             String?
  role                 UserRole
  fullName             String
  dateOfBirth          DateTime?
  gender               UserGender?
  educationLevel       String?
  currentAddress       String?
  profilePicture       String?
  phoneNumber          String?
  cvUrl                String?
  headline             String?
  skills               String[]
  isVerified           Boolean
  isDeleted            Boolean
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  company              Company?              @relation(fields: [companyId], references: [id])
  regency              Regency?              @relation(fields: [regencyId], references: [id])
  jobApplications      JobApplication[]
  userBadges           UserBadge[]
  companyReviews       CompanyReview[]
  savedJobs            SavedJob[]
  employees            Employee[]
  certificates         Certificate[]
  userAssessments      UserAssessment[]
  verificationTokens   VerificationToken[]
  resetPasswordToken   ResetPasswordToken[]
  payments             Payment[]
  subscriptions        Subscription[]
  experience           WorkExperience[]
  userSkillAssessments UserSkillAssessment[]

  @@map("users")
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  userId       Int
  companyName  String
  jobTitle     String
  startDate    DateTime
  endDate      DateTime?
  isCurrentJob Boolean   @default(false)
  description  String?
  user         User      @relation(fields: [userId], references: [id])

  @@map("work_experiences")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  isValid   Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("verification_tokens")
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  isValid   Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("reset_password_tokens")
}

model Company {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  industry         String?
  logo             String?
  links            String?
  employeeCount    Int?
  establishedYear  Int
  about            String?
  isDeleted        Boolean
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  users            User[]
  companyLocations CompanyLocation[]
  jobs             Job[]
  companyReviews   CompanyReview[]
  employees        Employee[]

  @@map("companies")
}

model CompanyLocation {
  id         Int      @id @default(autoincrement())
  companyId  Int
  regencyId  Int
  address    String
  postalCode String
  latitude   String
  longitude  String
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [companyId], references: [id])
  regency    Regency  @relation(fields: [regencyId], references: [id])
  Job        Job[]

  @@map("company_locations")
}

model Province {
  id        Int       @id @default(autoincrement())
  province  String
  regencies Regency[]

  @@map("provinces")
}

model Regency {
  id               Int               @id @default(autoincrement())
  provinceId       Int
  regency          String
  type             String
  province         Province          @relation(fields: [provinceId], references: [id])
  users            User[]
  companyLocations CompanyLocation[]

  @@map("regencies")
}

model Job {
  id                  Int              @id @default(autoincrement())
  companyId           Int
  title               String
  description         String
  bannerImage         String?
  category            String
  salary              Int?
  tags                String[]
  applicationDeadline DateTime
  isPublished         Boolean
  requiresAssessment  Boolean
  isDeleted           Boolean
  companyLocationId   Int
  companyLocation     CompanyLocation  @relation(fields: [companyLocationId], references: [id])
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  company             Company          @relation(fields: [companyId], references: [id])
  jobApplications     JobApplication[]
  savedJobs           SavedJob[]
  assessments         Assessment[]

  @@map("jobs")
}

model JobApplication {
  id             Int               @id @default(autoincrement())
  jobId          Int
  userId         Int
  cvFile         String
  attachment     String?
  expectedSalary Int
  status         ApplicationStatus
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  job            Job               @relation(fields: [jobId], references: [id])
  user           User              @relation(fields: [userId], references: [id])
  interviews     Interview[]

  @@map("job_applications")
}

model UserBadge {
  id          Int      @id @default(autoincrement())
  userId      Int
  badgeName   String
  description String
  awardedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("user_badges")
}

model Interview {
  id               Int            @id @default(autoincrement())
  jobApplicationId Int
  scheduledDate    DateTime
  interviewerName  String
  location         String
  meetingLink      String?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id])

  @@map("interviews")
}

model CompanyReview {
  id                    Int      @id @default(autoincrement())
  companyId             Int
  userId                Int
  jobTitle              String
  salaryRange           String
  workCultureRating     Int
  workLifeBalanceRating Int
  facilitiesRating      Int
  careerGrowthRating    Int
  overallRating         Int
  comment               String
  createdAt             DateTime @default(now())
  company               Company  @relation(fields: [companyId], references: [id])
  user                  User     @relation(fields: [userId], references: [id])

  @@map("company_reviews")
}

model Subscription {
  id          Int                @id @default(autoincrement())
  userId      Int
  paymentId   Int
  expiredDate DateTime
  status      SubscriptionStatus
  createdAt   DateTime           @default(now())
  user        User               @relation(fields: [userId], references: [id])
  payment     Payment            @relation(fields: [paymentId], references: [id])

  @@map("subscriptions")
}

model Payment {
  id                     Int                  @id @default(autoincrement())
  userId                 Int
  subscriptionCategoryId Int
  uuid                   String               @default(uuid())
  paymentMethod          PaymentMethod
  paymentProof           String?
  invoiceUrl             String?
  duration               Int
  total                  Int
  status                 PaymentStatus
  isRenewal              Boolean              @default(false)
  createdAt              DateTime             @default(now())
  expiredAt              DateTime?
  paidAt                 DateTime?
  updatedAt              DateTime             @updatedAt
  category               SubscriptionCategory @relation(fields: [subscriptionCategoryId], references: [id])
  user                   User                 @relation(fields: [userId], references: [id])
  subscriptions          Subscription[]

  @@map("payments")
}

model SubscriptionCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  price       Int
  features    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payments    Payment[]

  @@map("subscription_categories")
}

model SavedJob {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])

  @@map("saved_jobs")
}

model Employee {
  id         Int      @id @default(autoincrement())
  companyId  Int
  userId     Int
  isEmployee Boolean
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [companyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("employees")
}

model SkillAssessment {
  id                       Int                       @id @default(autoincrement())
  title                    String
  slug                     String                    @unique
  description              String
  passingScore             Int
  badgeImage               String
  status                   SkillAssessmentStatus
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  skillAssessmentQuestions SkillAssessmentQuestion[]
  userSkillAssessments     UserSkillAssessment[]

  @@map("skill_assessments")
}

model SkillAssessmentQuestion {
  id                         Int                         @id @default(autoincrement())
  skillAssessmentId          Int
  question                   String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  skillAssessment            SkillAssessment             @relation(fields: [skillAssessmentId], references: [id])
  skillAssessmentOptions     SkillAssessmentOption[]
  skillAssessmentUserAnswers SkillAssessmentUserAnswer[]

  @@map("skill_assessment_questions")
}

model SkillAssessmentOption {
  id                         Int                         @id @default(autoincrement())
  skillAssessmentQuestionId  Int
  option                     String
  isCorrect                  Boolean
  createdAt                  DateTime                    @default(now())
  skillAssessmentQuestion    SkillAssessmentQuestion     @relation(fields: [skillAssessmentQuestionId], references: [id])
  skillAssessmentUserAnswers SkillAssessmentUserAnswer[]

  @@map("skill_assessments_options")
}

model SkillAssessmentUserAnswer {
  id                        Int                     @id @default(autoincrement())
  userId                    Int
  skillAssessmentQuestionId Int
  selectedOptionId          Int
  createdAt                 DateTime                @default(now())
  skillAssessmentQuestion   SkillAssessmentQuestion @relation(fields: [skillAssessmentQuestionId], references: [id])
  skillAssessmentOption     SkillAssessmentOption   @relation(fields: [selectedOptionId], references: [id])

  @@map("skill_assessment_user_answers")
}

model UserSkillAssessment {
  id                Int             @id @default(autoincrement())
  userId            Int
  skillAssessmentId Int
  score             Int
  createdAt         DateTime        @default(now())
  skillAssessment   SkillAssessment @relation(fields: [skillAssessmentId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
  certificates      Certificate[]

  @@map("user_skill_assessments")
}

model Certificate {
  id                    Int                 @id @default(autoincrement())
  userId                Int
  userSkillAssessmentId Int
  uuid                  String              @default(uuid())
  certificateUrl        String?
  createdAt             DateTime            @default(now())
  user                  User                @relation(fields: [userId], references: [id])
  userSkillAssessment   UserSkillAssessment @relation(fields: [userSkillAssessmentId], references: [id])

  @@map("certificates")
}

model UserAssessment {
  id           Int                  @id @default(autoincrement())
  assessmentId Int
  userId       Int
  score        Int
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  status       UserAssessmentStatus @default(PENDING)
  assessment   Assessment           @relation(fields: [assessmentId], references: [id])
  user         User                 @relation(fields: [userId], references: [id])

  @@map("user_assessments")
}

model Assessment {
  id                  Int                  @id @default(autoincrement())
  jobId               Int                  @unique
  title               String
  description         String
  passingScore        Int
  status              AssessmentStatus
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  job                 Job                  @relation(fields: [jobId], references: [id])
  assessmentQuestions AssessmentQuestion[]
  userAssessments     UserAssessment[]

  @@map("assessments")
}

model AssessmentQuestion {
  id                Int                @id @default(autoincrement())
  assessmentId      Int
  question          String
  createdAt         DateTime           @default(now())
  assessment        Assessment         @relation(fields: [assessmentId], references: [id])
  assessmentOptions AssessmentOption[]

  @@map("assessment_questions")
}

model AssessmentOption {
  id                 Int                @id @default(autoincrement())
  questionId         Int
  option             String
  isCorrect          Boolean
  createdAt          DateTime           @default(now())
  assessmentQuestion AssessmentQuestion @relation(fields: [questionId], references: [id])

  @@map("assessment_options")
}

enum UserRole {
  USER
  ADMIN
  DEVELOPER
}

enum UserGender {
  MALE
  FEMALE
}

enum ApplicationStatus {
  PENDING
  IN_REVIEW
  INTERVIEW_SCHEDULED
  ACCEPTED
  REJECTED
  CANCELLED
}

enum PaymentMethod {
  PAYMENT_MANUAL
  PAYMENT_GATEWAY
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  EXPIRED
  RENEWED
  MAILED
}

enum PaymentStatus {
  PENDING
  WAITING_ADMIN
  PAID
  EXPIRED
  REJECTED
  CANCELLED
}

enum SkillAssessmentStatus {
  PUBLISHED
  DRAFT
}

enum AssessmentStatus {
  PUBLISHED
  DRAFT
}

enum UserAssessmentStatus {
  PENDING
  STARTED
  ON_DOING
  DONE
  EXPIRED
}
